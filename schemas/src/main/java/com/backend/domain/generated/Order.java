/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.backend.domain.generated;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8685596470057929726L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.backend.domain.generated\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"logicalType\":\"uuid\"}},{\"name\":\"customerName\",\"type\":\"string\"},{\"name\":\"customerEmail\",\"type\":\"string\"},{\"name\":\"message\",\"type\":\"string\",\"doc\":\"Optional field for message from user\",\"default\":\"\"},{\"name\":\"store\",\"type\":{\"type\":\"record\",\"name\":\"Store\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"addressLine1\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\",\"default\":\"USA\"},{\"name\":\"zip\",\"type\":\"string\"}]}}]}},{\"name\":\"orderItems\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItem\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"size\",\"type\":{\"type\":\"enum\",\"name\":\"Size\",\"symbols\":[\"SMALL\",\"MEDIUM\",\"LARGE\"]}},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"cost\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":3,\"scale\":2}}]}}},{\"name\":\"orderedTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"pickUp\",\"type\":{\"type\":\"enum\",\"name\":\"PickUp\",\"symbols\":[\"STORE\",\"HOME\"]}},{\"name\":\"status\",\"type\":\"string\",\"default\":\"NEW\"},{\"name\":\"recordType\",\"type\":{\"type\":\"enum\",\"name\":\"RecordType\",\"symbols\":[\"CREATE_ORDER\",\"UPDATE_ORDER\",\"DELETE_ORDER\"]},\"default\":\"CREATE_ORDER\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.UUIDConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.UUID id;
  @Deprecated public java.lang.CharSequence customerName;
  @Deprecated public java.lang.CharSequence customerEmail;
  /** Optional field for message from user */
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public com.backend.domain.generated.Store store;
  @Deprecated public java.util.List<com.backend.domain.generated.OrderItem> orderItems;
  @Deprecated public java.time.Instant orderedTime;
  @Deprecated public com.backend.domain.generated.PickUp pickUp;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public com.backend.domain.generated.RecordType recordType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param customerName The new value for customerName
   * @param customerEmail The new value for customerEmail
   * @param message Optional field for message from user
   * @param store The new value for store
   * @param orderItems The new value for orderItems
   * @param orderedTime The new value for orderedTime
   * @param pickUp The new value for pickUp
   * @param status The new value for status
   * @param recordType The new value for recordType
   */
  public Order(java.util.UUID id, java.lang.CharSequence customerName, java.lang.CharSequence customerEmail, java.lang.CharSequence message, com.backend.domain.generated.Store store, java.util.List<com.backend.domain.generated.OrderItem> orderItems, java.time.Instant orderedTime, com.backend.domain.generated.PickUp pickUp, java.lang.CharSequence status, com.backend.domain.generated.RecordType recordType) {
    this.id = id;
    this.customerName = customerName;
    this.customerEmail = customerEmail;
    this.message = message;
    this.store = store;
    this.orderItems = orderItems;
    this.orderedTime = orderedTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.pickUp = pickUp;
    this.status = status;
    this.recordType = recordType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return customerName;
    case 2: return customerEmail;
    case 3: return message;
    case 4: return store;
    case 5: return orderItems;
    case 6: return orderedTime;
    case 7: return pickUp;
    case 8: return status;
    case 9: return recordType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      new org.apache.avro.Conversions.UUIDConversion(),
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.util.UUID)value$; break;
    case 1: customerName = (java.lang.CharSequence)value$; break;
    case 2: customerEmail = (java.lang.CharSequence)value$; break;
    case 3: message = (java.lang.CharSequence)value$; break;
    case 4: store = (com.backend.domain.generated.Store)value$; break;
    case 5: orderItems = (java.util.List<com.backend.domain.generated.OrderItem>)value$; break;
    case 6: orderedTime = (java.time.Instant)value$; break;
    case 7: pickUp = (com.backend.domain.generated.PickUp)value$; break;
    case 8: status = (java.lang.CharSequence)value$; break;
    case 9: recordType = (com.backend.domain.generated.RecordType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.util.UUID getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.util.UUID value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'customerName' field.
   * @return The value of the 'customerName' field.
   */
  public java.lang.CharSequence getCustomerName() {
    return customerName;
  }


  /**
   * Sets the value of the 'customerName' field.
   * @param value the value to set.
   */
  public void setCustomerName(java.lang.CharSequence value) {
    this.customerName = value;
  }

  /**
   * Gets the value of the 'customerEmail' field.
   * @return The value of the 'customerEmail' field.
   */
  public java.lang.CharSequence getCustomerEmail() {
    return customerEmail;
  }


  /**
   * Sets the value of the 'customerEmail' field.
   * @param value the value to set.
   */
  public void setCustomerEmail(java.lang.CharSequence value) {
    this.customerEmail = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return Optional field for message from user
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }


  /**
   * Sets the value of the 'message' field.
   * Optional field for message from user
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'store' field.
   * @return The value of the 'store' field.
   */
  public com.backend.domain.generated.Store getStore() {
    return store;
  }


  /**
   * Sets the value of the 'store' field.
   * @param value the value to set.
   */
  public void setStore(com.backend.domain.generated.Store value) {
    this.store = value;
  }

  /**
   * Gets the value of the 'orderItems' field.
   * @return The value of the 'orderItems' field.
   */
  public java.util.List<com.backend.domain.generated.OrderItem> getOrderItems() {
    return orderItems;
  }


  /**
   * Sets the value of the 'orderItems' field.
   * @param value the value to set.
   */
  public void setOrderItems(java.util.List<com.backend.domain.generated.OrderItem> value) {
    this.orderItems = value;
  }

  /**
   * Gets the value of the 'orderedTime' field.
   * @return The value of the 'orderedTime' field.
   */
  public java.time.Instant getOrderedTime() {
    return orderedTime;
  }


  /**
   * Sets the value of the 'orderedTime' field.
   * @param value the value to set.
   */
  public void setOrderedTime(java.time.Instant value) {
    this.orderedTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'pickUp' field.
   * @return The value of the 'pickUp' field.
   */
  public com.backend.domain.generated.PickUp getPickUp() {
    return pickUp;
  }


  /**
   * Sets the value of the 'pickUp' field.
   * @param value the value to set.
   */
  public void setPickUp(com.backend.domain.generated.PickUp value) {
    this.pickUp = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'recordType' field.
   * @return The value of the 'recordType' field.
   */
  public com.backend.domain.generated.RecordType getRecordType() {
    return recordType;
  }


  /**
   * Sets the value of the 'recordType' field.
   * @param value the value to set.
   */
  public void setRecordType(com.backend.domain.generated.RecordType value) {
    this.recordType = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.backend.domain.generated.Order.Builder newBuilder() {
    return new com.backend.domain.generated.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.backend.domain.generated.Order.Builder newBuilder(com.backend.domain.generated.Order.Builder other) {
    if (other == null) {
      return new com.backend.domain.generated.Order.Builder();
    } else {
      return new com.backend.domain.generated.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.backend.domain.generated.Order.Builder newBuilder(com.backend.domain.generated.Order other) {
    if (other == null) {
      return new com.backend.domain.generated.Order.Builder();
    } else {
      return new com.backend.domain.generated.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private java.util.UUID id;
    private java.lang.CharSequence customerName;
    private java.lang.CharSequence customerEmail;
    /** Optional field for message from user */
    private java.lang.CharSequence message;
    private com.backend.domain.generated.Store store;
    private com.backend.domain.generated.Store.Builder storeBuilder;
    private java.util.List<com.backend.domain.generated.OrderItem> orderItems;
    private java.time.Instant orderedTime;
    private com.backend.domain.generated.PickUp pickUp;
    private java.lang.CharSequence status;
    private com.backend.domain.generated.RecordType recordType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.backend.domain.generated.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.customerName)) {
        this.customerName = data().deepCopy(fields()[1].schema(), other.customerName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.customerEmail)) {
        this.customerEmail = data().deepCopy(fields()[2].schema(), other.customerEmail);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.store)) {
        this.store = data().deepCopy(fields()[4].schema(), other.store);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (other.hasStoreBuilder()) {
        this.storeBuilder = com.backend.domain.generated.Store.newBuilder(other.getStoreBuilder());
      }
      if (isValidValue(fields()[5], other.orderItems)) {
        this.orderItems = data().deepCopy(fields()[5].schema(), other.orderItems);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.orderedTime)) {
        this.orderedTime = data().deepCopy(fields()[6].schema(), other.orderedTime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.pickUp)) {
        this.pickUp = data().deepCopy(fields()[7].schema(), other.pickUp);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.recordType)) {
        this.recordType = data().deepCopy(fields()[9].schema(), other.recordType);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.backend.domain.generated.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customerName)) {
        this.customerName = data().deepCopy(fields()[1].schema(), other.customerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.customerEmail)) {
        this.customerEmail = data().deepCopy(fields()[2].schema(), other.customerEmail);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.message)) {
        this.message = data().deepCopy(fields()[3].schema(), other.message);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.store)) {
        this.store = data().deepCopy(fields()[4].schema(), other.store);
        fieldSetFlags()[4] = true;
      }
      this.storeBuilder = null;
      if (isValidValue(fields()[5], other.orderItems)) {
        this.orderItems = data().deepCopy(fields()[5].schema(), other.orderItems);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.orderedTime)) {
        this.orderedTime = data().deepCopy(fields()[6].schema(), other.orderedTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.pickUp)) {
        this.pickUp = data().deepCopy(fields()[7].schema(), other.pickUp);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.recordType)) {
        this.recordType = data().deepCopy(fields()[9].schema(), other.recordType);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.util.UUID getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setId(java.util.UUID value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerName() {
      return customerName;
    }


    /**
      * Sets the value of the 'customerName' field.
      * @param value The value of 'customerName'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setCustomerName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.customerName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'customerName' field has been set.
      * @return True if the 'customerName' field has been set, false otherwise.
      */
    public boolean hasCustomerName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'customerName' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearCustomerName() {
      customerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'customerEmail' field.
      * @return The value.
      */
    public java.lang.CharSequence getCustomerEmail() {
      return customerEmail;
    }


    /**
      * Sets the value of the 'customerEmail' field.
      * @param value The value of 'customerEmail'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setCustomerEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.customerEmail = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'customerEmail' field has been set.
      * @return True if the 'customerEmail' field has been set, false otherwise.
      */
    public boolean hasCustomerEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'customerEmail' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearCustomerEmail() {
      customerEmail = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * Optional field for message from user
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }


    /**
      * Sets the value of the 'message' field.
      * Optional field for message from user
      * @param value The value of 'message'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.message = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * Optional field for message from user
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'message' field.
      * Optional field for message from user
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearMessage() {
      message = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'store' field.
      * @return The value.
      */
    public com.backend.domain.generated.Store getStore() {
      return store;
    }


    /**
      * Sets the value of the 'store' field.
      * @param value The value of 'store'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setStore(com.backend.domain.generated.Store value) {
      validate(fields()[4], value);
      this.storeBuilder = null;
      this.store = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'store' field has been set.
      * @return True if the 'store' field has been set, false otherwise.
      */
    public boolean hasStore() {
      return fieldSetFlags()[4];
    }

    /**
     * Gets the Builder instance for the 'store' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.backend.domain.generated.Store.Builder getStoreBuilder() {
      if (storeBuilder == null) {
        if (hasStore()) {
          setStoreBuilder(com.backend.domain.generated.Store.newBuilder(store));
        } else {
          setStoreBuilder(com.backend.domain.generated.Store.newBuilder());
        }
      }
      return storeBuilder;
    }

    /**
     * Sets the Builder instance for the 'store' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.backend.domain.generated.Order.Builder setStoreBuilder(com.backend.domain.generated.Store.Builder value) {
      clearStore();
      storeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'store' field has an active Builder instance
     * @return True if the 'store' field has an active Builder instance
     */
    public boolean hasStoreBuilder() {
      return storeBuilder != null;
    }

    /**
      * Clears the value of the 'store' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearStore() {
      store = null;
      storeBuilder = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderItems' field.
      * @return The value.
      */
    public java.util.List<com.backend.domain.generated.OrderItem> getOrderItems() {
      return orderItems;
    }


    /**
      * Sets the value of the 'orderItems' field.
      * @param value The value of 'orderItems'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setOrderItems(java.util.List<com.backend.domain.generated.OrderItem> value) {
      validate(fields()[5], value);
      this.orderItems = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'orderItems' field has been set.
      * @return True if the 'orderItems' field has been set, false otherwise.
      */
    public boolean hasOrderItems() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'orderItems' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearOrderItems() {
      orderItems = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderedTime' field.
      * @return The value.
      */
    public java.time.Instant getOrderedTime() {
      return orderedTime;
    }


    /**
      * Sets the value of the 'orderedTime' field.
      * @param value The value of 'orderedTime'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setOrderedTime(java.time.Instant value) {
      validate(fields()[6], value);
      this.orderedTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'orderedTime' field has been set.
      * @return True if the 'orderedTime' field has been set, false otherwise.
      */
    public boolean hasOrderedTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'orderedTime' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearOrderedTime() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'pickUp' field.
      * @return The value.
      */
    public com.backend.domain.generated.PickUp getPickUp() {
      return pickUp;
    }


    /**
      * Sets the value of the 'pickUp' field.
      * @param value The value of 'pickUp'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setPickUp(com.backend.domain.generated.PickUp value) {
      validate(fields()[7], value);
      this.pickUp = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'pickUp' field has been set.
      * @return True if the 'pickUp' field has been set, false otherwise.
      */
    public boolean hasPickUp() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'pickUp' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearPickUp() {
      pickUp = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.status = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearStatus() {
      status = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordType' field.
      * @return The value.
      */
    public com.backend.domain.generated.RecordType getRecordType() {
      return recordType;
    }


    /**
      * Sets the value of the 'recordType' field.
      * @param value The value of 'recordType'.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder setRecordType(com.backend.domain.generated.RecordType value) {
      validate(fields()[9], value);
      this.recordType = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'recordType' field has been set.
      * @return True if the 'recordType' field has been set, false otherwise.
      */
    public boolean hasRecordType() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'recordType' field.
      * @return This builder.
      */
    public com.backend.domain.generated.Order.Builder clearRecordType() {
      recordType = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.id = fieldSetFlags()[0] ? this.id : (java.util.UUID) defaultValue(fields()[0]);
        record.customerName = fieldSetFlags()[1] ? this.customerName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.customerEmail = fieldSetFlags()[2] ? this.customerEmail : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.message = fieldSetFlags()[3] ? this.message : (java.lang.CharSequence) defaultValue(fields()[3]);
        if (storeBuilder != null) {
          try {
            record.store = this.storeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("store"));
            throw e;
          }
        } else {
          record.store = fieldSetFlags()[4] ? this.store : (com.backend.domain.generated.Store) defaultValue(fields()[4]);
        }
        record.orderItems = fieldSetFlags()[5] ? this.orderItems : (java.util.List<com.backend.domain.generated.OrderItem>) defaultValue(fields()[5]);
        record.orderedTime = fieldSetFlags()[6] ? this.orderedTime : (java.time.Instant) defaultValue(fields()[6]);
        record.pickUp = fieldSetFlags()[7] ? this.pickUp : (com.backend.domain.generated.PickUp) defaultValue(fields()[7]);
        record.status = fieldSetFlags()[8] ? this.status : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.recordType = fieldSetFlags()[9] ? this.recordType : (com.backend.domain.generated.RecordType) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










